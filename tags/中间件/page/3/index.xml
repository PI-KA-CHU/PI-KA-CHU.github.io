<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中间件 on PI-KA-CHU&#39;s blog</title>
    <link>https://PI-KA-CHU.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
    <description>Recent content in 中间件 on PI-KA-CHU&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 26 Feb 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://PI-KA-CHU.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>redis的主从模式配置</title>
      <link>https://PI-KA-CHU.github.io/2019/02/redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/02/redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE/</guid>
      <description>前言 replica-master模式就是slave-master模式，查了一下好像是slave-master名称遭到太多人反对，作者被迫进行</description>
    </item>
    
    <item>
      <title>git命令的使用及常见的问题</title>
      <link>https://PI-KA-CHU.github.io/2019/02/git%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/02/git%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>获取git仓库 git init //初始化本地仓库（会自动创建一个名为 .git 的子目录） git clone [URL] //拉取远程代码到本地 git提交代码的基本操作 git add . // 提交所有修改</description>
    </item>
    
    <item>
      <title>SpringBoot定时任务及其redis的分布式锁创建</title>
      <link>https://PI-KA-CHU.github.io/2019/02/springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8F%8Aredis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/02/springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8F%8Aredis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%88%9B%E5%BB%BA/</guid>
      <description>分布式锁实现流程图 一、@Scheduled的使用及其redis的分布式锁创建 创建新类，使用@Scheduled注解注释需要定时启动的方法 单机</description>
    </item>
    
    <item>
      <title>RESTful学习</title>
      <link>https://PI-KA-CHU.github.io/2019/02/restful%D1%A7%CF%B0/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/02/restful%D1%A7%CF%B0/</guid>
      <description>REST全称是Representational State Transfer，中文意思是表述性状态转移，指的是一组架构约束条件和原则， 如果一个架构符合R</description>
    </item>
    
    <item>
      <title>SpringBoot实现全局异常的捕获</title>
      <link>https://PI-KA-CHU.github.io/2019/02/springboot%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8D%95%E8%8E%B7/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/02/springboot%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8D%95%E8%8E%B7/</guid>
      <description>1. 创建一个简单类 使用@RestControllerAdvice注册组件，使用@ExceptionHandler捕获异常 该类只捕获Contro</description>
    </item>
    
    <item>
      <title>SpringBoot中使用Spring Session实现单点登陆</title>
      <link>https://PI-KA-CHU.github.io/2019/02/springboot%E4%B8%AD%E4%BD%BF%E7%94%A8spring-session%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%86/</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/02/springboot%E4%B8%AD%E4%BD%BF%E7%94%A8spring-session%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%86/</guid>
      <description>一、Session的共享问题 Session的共享可以通过redis的操作及spring session进行解决，从而实现单点登陆，redis操</description>
    </item>
    
    <item>
      <title>Idea中SpringBoot &#43; maven进行环境隔离</title>
      <link>https://PI-KA-CHU.github.io/2019/02/idea%E4%B8%ADspringboot--maven%E8%BF%9B%E8%A1%8C%E7%8E%AF%E5%A2%83%E9%9A%94%E7%A6%BB/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/02/idea%E4%B8%ADspringboot--maven%E8%BF%9B%E8%A1%8C%E7%8E%AF%E5%A2%83%E9%9A%94%E7%A6%BB/</guid>
      <description>1. 新建各个环境的配置文件夹 2. pom.xml中配置profile &amp;lt;!-- Maven多环境隔离配置 --&amp;gt; &amp;lt;project&amp;gt; &amp;lt;build&amp;gt; &amp;lt;!-- 多环境文件夹配置，根据profile选择对应</description>
    </item>
    
    <item>
      <title>SpringBoot2.0静态变量注入及过滤器的使用</title>
      <link>https://PI-KA-CHU.github.io/2019/01/springboot2.0%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5%E5%8F%8A%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/springboot2.0%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5%E5%8F%8A%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>一、实现静态变量的注入 参考： SpringBoot的常见注解：https://blog.csdn.net/fxbin123/article/d</description>
    </item>
    
    <item>
      <title>SpringBoot整合redis</title>
      <link>https://PI-KA-CHU.github.io/2019/01/spring%E6%95%B4%E5%90%88redis/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/spring%E6%95%B4%E5%90%88redis/</guid>
      <description>一、redis单机版 写在前面 选中代码块，按control + alt + t：快捷tryCatch 选中类名，按control + shift + t：快捷创建Junit</description>
    </item>
    
    <item>
      <title>Redis命令操作</title>
      <link>https://PI-KA-CHU.github.io/2019/01/redis%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/redis%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</guid>
      <description>一、redis的基础命令 info命令： # Server：查看系统信息，包括redis的版本信息，使用的端口和process_id和依赖的gcc</description>
    </item>
    
    <item>
      <title>Redis安装及使用</title>
      <link>https://PI-KA-CHU.github.io/2019/01/redis%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/redis%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>一、redis的安装（Linux环境） 下载需要的redis版本：http://download.redis.io/releases/ ，将re</description>
    </item>
    
    <item>
      <title>Idea的使用及常见问题</title>
      <link>https://PI-KA-CHU.github.io/2019/01/idea%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/idea%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>一、前言 一直使用Eclipse进行java开发的我最近发现一个界面及其炫酷的编译器Idea，尝试着使用Idea进行开发，记录下出现的一些问题</description>
    </item>
    
    <item>
      <title>进程与线程</title>
      <link>https://PI-KA-CHU.github.io/2019/01/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
      <description>一、进程的定义及特征 定义： 多道程序设计技术的引入，实现了资源的共享和程序的并发执行。为了描述并发执行的特点，引入了进程的概念。进程是可高并发</description>
    </item>
    
    <item>
      <title>操作系统引论</title>
      <link>https://PI-KA-CHU.github.io/2019/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E8%AE%BA/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E8%AE%BA/</guid>
      <description>一、操作系统的概念 操作系统是一组控制和管理计算机硬件资源和软件资源、合理组织计算机的工作流程，方便用户使用的程序的集合。 操作系统是裸机上的第</description>
    </item>
    
    <item>
      <title>分支限界法</title>
      <link>https://PI-KA-CHU.github.io/2019/01/%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%95/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%95/</guid>
      <description>分支限界法的性质 广度优先或最小耗费（最大效益）优先的方式搜索解空间树 先入先出队列式分支限界 优先队列式分支限界 分支限界法和回溯法的关系 搜索方式</description>
    </item>
    
    <item>
      <title>时间空间复杂度</title>
      <link>https://PI-KA-CHU.github.io/2019/01/%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>参考 https://blog.csdn.net/zolalad/article/details/11848739</description>
    </item>
    
    <item>
      <title>递归与分治</title>
      <link>https://PI-KA-CHU.github.io/2019/01/%E9%80%92%E5%BD%92%E4%B8%8E%E5%88%86%E6%B2%BB/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/%E9%80%92%E5%BD%92%E4%B8%8E%E5%88%86%E6%B2%BB/</guid>
      <description>一、分治法 分治法思想 将要解决的较大规模的问题不断地分割成更小规模的子问题，直到能够很容易地得到子问题的解。 对小规模的问题进行求解 将小问题的解</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://PI-KA-CHU.github.io/2019/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>动态规划的基本步骤 1. 分析最优子结构 找出最优解的性质，并刻画其结构特征 2. 建立递归关系 递归地定义最优值 3. 计算最优值 以自底向上的方式计算出最优值（</description>
    </item>
    
    <item>
      <title>回溯法</title>
      <link>https://PI-KA-CHU.github.io/2019/01/%E5%9B%9E%E6%BA%AF%E6%B3%95/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/%E5%9B%9E%E6%BA%AF%E6%B3%95/</guid>
      <description>回溯法的本质 具有限界函数的深度优先搜索法 扩展结点：一个正在产生儿子的结点称为扩展结点 活结点：一个自身已生成但其儿子还没有全部生成的节点称做活</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>https://PI-KA-CHU.github.io/2019/01/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://PI-KA-CHU.github.io/2019/01/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>贪心算法的本质 做出在当前看来最好的选择 自顶向下地解决问题 贪心算法基本要素 最优子结构 贪心选择 贪心算法的例子 活动安排问题： 利用贪心算法，解决下列</description>
    </item>
    
  </channel>
</rss>
